vim9script

colorscheme default

source $VIMRUNTIME/defaults.vim
autocmd! vimHints

filetype plugin indent on
syntax on

set autoindent
set autoread
set autowrite
set breakindent
set clipboard=unnamed
set cmdheight=1
set completefuzzycollect=keyword,files,whole_line
set completeopt=menuone,noinsert,fuzzy,nosort
set confirm
set cursorline
set cursorlineopt=number
set diffopt=internal,filler,closeoff,algorithm:histogram,linematch:60,indent-heuristic,vertical,context:99
set expandtab
set foldcolumn=0
set foldlevel=99
set foldlevelstart=99
set foldmethod=indent
set foldnestmax=10
set foldtext=
set formatoptions=jcroqlnt
set grepformat=%f:%l:%c:%m
set grepprg=rg\ --vimgrep\ --hidden\ --glob=!.git/*
set ignorecase
set infercase
set laststatus=0
set linebreak
set mouse=a
set nobackup
set nolist
set noruler
set noshowcmd
set noswapfile
set notermguicolors
set nowrap
set nowrap
set nowritebackup
set number
set pummaxwidth=100
set relativenumber
set scrolloff=8
set shiftround
set shortmess=CFOSWIaco
set signcolumn=yes
set smartcase
set smartindent
set smoothscroll
set splitbelow
set splitkeep=screen
set splitright
set switchbuf=usetab
set tabstop=4
set timeoutlen=1000
set ttimeoutlen=10
set undofile
set undolevels=10000
set updatetime=300
set virtualedit=block
set wildignore+=.DS_Store
set wildignorecase
set wildmenu
set wildmode=noselect:lastused
set wildoptions=pum,fuzzy
set winminwidth=5

# ----------------------------------------------------------------------
# Plug

call plug#begin()

Plug 'tpope/vim-sensible'
Plug 'habamax/vim-dir'

call plug#end()

var files_cache: list<string> = []

au CmdlineEnter : files_cache = []

def FindCmd(): string
    var cmd = ''
    if executable('fd')
        cmd = 'fd . --path-separator / --type f --hidden --follow --exclude .git'
    elseif executable('fdfind')
        cmd = 'fdfind . --path-separator / --type f --hidden --follow --exclude .git'
    elseif executable('rg')
        cmd = 'rg --path-separator / --files --hidden --glob !.git'
    elseif executable('find')
        cmd = 'find \! \( -path "*/.git" -prune -o -name "*.swp" \) -type f -follow'
    elseif executable('ugrep')
        cmd = 'ugrep "" -Rl -I --ignore-files'
    endif
    return cmd
enddef

def Find(cmd_arg: string, cmd_complete: bool): list<string>
    if empty(files_cache)
        var cmd = FindCmd()
        if empty(cmd)
            files_cache = globpath('.', '**', 1, 1)
            -> filter((_,v) => !isdirectory(v))
            -> mapnew((_, v) => v->substitute('^\.[\/]',"",""))
        else
            files_cheche = systemlist(cmd)
        endif
    endif

    if empty(cmd_arg)
        return files_cache
    else
        return files_cache->matchfuzzy(cmd_arg)
    endif
enddef

set findfunc=Find

nnoremap <leader>f :find<space>
