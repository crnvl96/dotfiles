#!/bin/bash

set -euo pipefail

RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

info() {
    if command -v gum >/dev/null 2>&1; then
        gum log --level info "$*"
    else
        echo -e "${BLUE}[INFO]${NC} $*"
    fi
}

success() {
    if command -v gum >/dev/null 2>&1; then
        gum log --level info "$*"
    else
        echo -e "${GREEN}[SUCCESS]${NC} $*"
    fi
}

warning() {
    if command -v gum >/dev/null 2>&1; then
        gum log --level warn "$*"
    else
        echo -e "${YELLOW}[WARNING]${NC} $*"
    fi
}

error() {
    if command -v gum >/dev/null 2>&1; then
        gum log --level error "$*"
    else
        echo -e "${RED}[ERROR]${NC} $*"
    fi
}

command_exists() {
    command -v "$1" >/dev/null 2>&1
}

slog() {
    local level="$1"; shift
    if command_exists gum; then
        gum log --structured --level "$level" "$@"
    else
        local msg="$1"; shift
        local out="[$(echo "$level" | tr '[:lower:]' '[:upper:]')] $msg"
        while [ "$#" -gt 1 ]; do
            out+=" $1=$2"; shift 2
        done
        echo -e "$out"
    fi
}

join_by() { local IFS="$1"; shift; echo "$*"; }

spin_if_gum() {
    local title="$1"; shift
    if command_exists gum; then
        gum spin --spinner dot --title "$title" -- "$@"
    else
        "$@"
    fi
}

UV_TOOLS=(pyright ruff)
MISE_TOOLS=(stylua taplo prettier jq dprint lua-language-server)
NPM_TOOLS=(vscode-langservers-extracted typescript-language-server yaml-language-server)

install_uv_tools() {
    local list; list=$(join_by ', ' "${UV_TOOLS[@]}")
    slog info "Installing tools" manager uv action install tools "$list"
    if command_exists uv; then
        local t
        for t in "${UV_TOOLS[@]}"; do
            slog info "Installing" manager uv tool "$t"
            spin_if_gum "uv: installing $t" uv tool install "$t"
        done
        success "uv install complete: $list"
    else
        error "uv is not installed. Please install uv first."
        return 1
    fi
}

update_uv_tools() {
    local list; list=$(join_by ', ' "${UV_TOOLS[@]}")
    slog info "Updating tools" manager uv action update tools "$list"
    if command_exists uv; then
        local t
        for t in "${UV_TOOLS[@]}"; do
            slog info "Updating" manager uv tool "$t"
            spin_if_gum "uv: updating $t" uv tool upgrade "$t"
        done
        success "uv update complete: $list"
    else
        error "uv is not installed"
        return 1
    fi
}

install_mise_tools() {
    local list; list=$(join_by ', ' "${MISE_TOOLS[@]}")
    slog info "Installing tools" manager mise action install tools "$list"
    if command_exists mise; then
        local t
        for t in "${MISE_TOOLS[@]}"; do
            slog info "Installing" manager mise tool "$t"
            spin_if_gum "mise: installing $t" mise use -g "$t"
        done
        success "mise install complete: $list"
    else
        error "mise is not installed. Please install mise first."
        return 1
    fi
}

update_mise_tools() {
    local list; list=$(join_by ', ' "${MISE_TOOLS[@]}")
    slog info "Updating tools" manager mise action update tools "$list"
    if command_exists mise; then
        local t
        for t in "${MISE_TOOLS[@]}"; do
            slog info "Updating" manager mise tool "$t"
            spin_if_gum "mise: updating $t" mise upgrade --bump "$t"
        done
        success "mise update complete: $list"
    else
        error "mise is not installed"
        return 1
    fi
}

install_npm_tools() {
    local list; list=$(join_by ', ' "${NPM_TOOLS[@]}")
    slog info "Installing tools" manager npm action install tools "$list"
    if command_exists npm; then
        local t
        for t in "${NPM_TOOLS[@]}"; do
            slog info "Installing" manager npm tool "$t"
            spin_if_gum "npm: installing $t" npm i -g "$t"
        done
        success "npm install complete: $list"
    else
        error "npm is not installed. Please install npm first."
        return 1
    fi
}

update_npm_tools() {
    local list; list=$(join_by ', ' "${NPM_TOOLS[@]}")
    slog info "Updating tools" manager npm action update tools "$list"
    if command_exists npm; then
        local t
        for t in "${NPM_TOOLS[@]}"; do
            slog info "Updating" manager npm tool "$t"
            spin_if_gum "npm: updating $t" npm i -g "${t}@latest"
        done
        success "npm update complete: $list"
    else
        error "npm is not installed"
        return 1
    fi
}

install_select() {
    if ! command_exists gum; then
        error "gum is not installed"
        return 1
    fi
    local choices selection
    choices=$(printf "%s\n" uv mise npm)
    selection=$(echo "$choices" | gum choose --no-limit --height 10 --header "Select installers to run") || true
    if [ -z "${selection:-}" ]; then
        warning "No selection made"
        return 1
    fi
    for s in $selection; do
        case "$s" in
            uv) install_uv_tools ;;
            mise) install_mise_tools ;;
            npm) install_npm_tools ;;
        esac
    done
}

update_select() {
    if ! command_exists gum; then
        error "gum is not installed"
        return 1
    fi
    local choices selection
    choices=$(printf "%s\n" uv mise npm)
    selection=$(echo "$choices" | gum choose --no-limit --height 10 --header "Select updaters to run") || true
    if [ -z "${selection:-}" ]; then
        warning "No selection made"
        return 1
    fi
    for s in $selection; do
        case "$s" in
            uv) update_uv_tools ;;
            mise) update_mise_tools ;;
            npm) update_npm_tools ;;
        esac
    done
}

menu() {
    if ! command_exists gum; then
        error "gum is not installed"
        return 1
    fi
    local actions selection
    actions=$(printf "%s\n" \
        install-all update-all \
        install-uv update-uv \
        install-mise update-mise \
        install-npm update-npm \
        install-select update-select \
        quit)
    selection=$(echo "$actions" | gum choose --height 15 --header "Tools Manager") || true
    case "${selection:-}" in
        install-all) install_all ;;
        update-all) update_all ;;
        install-uv) install_uv_tools ;;
        update-uv) update_uv_tools ;;
        install-mise) install_mise_tools ;;
        update-mise) update_mise_tools ;;
        install-npm) install_npm_tools ;;
        update-npm) update_npm_tools ;;
        install-select) install_select ;;
        update-select) update_select ;;
        ""|quit) : ;;
        *) error "Unknown selection: $selection" ;;
    esac
}

install_all() {
    info "Starting installation of all tools..."
    install_uv_tools
    install_mise_tools
    install_npm_tools
    success "All tools installation completed"
}

update_all() {
    info "Starting update of all tools..."
    update_uv_tools
    update_mise_tools
    update_npm_tools
    success "All tools update completed"
}

show_help() {
    cat << EOF
Tools Management Script

Usage: tools [command]

Commands:
  install-all      Install all tools
  update-all       Update all tools
  install-uv       Install uv managed tools (pyright, ruff)
  update-uv        Update uv managed tools
  install-mise     Install mise managed tools (stylua, taplo, prettier, jq, dprint, lua-language-server)
  update-mise      Update mise managed tools
  install-npm      Install npm managed tools (vscode-langservers-extracted, typescript-language-server, yaml-language-server)
  update-npm       Update npm managed tools
  install-select   Select which installers to run (gum)
  update-select    Select which updaters to run (gum)
  menu             Interactive menu (gum)
  help             Show this help message

EOF
}

case "${1:-}" in
    "install-all") install_all ;;
    "update-all") update_all ;;
    "install-uv") install_uv_tools ;;
    "update-uv") update_uv_tools ;;
    "install-mise") install_mise_tools ;;
    "update-mise") update_mise_tools ;;
    "install-npm") install_npm_tools ;;
    "update-npm") update_npm_tools ;;
    "install-select") install_select ;;
    "update-select") update_select ;;
    "menu") menu ;;
    "help" | "-h" | "--help") show_help ;;
    "") if command_exists gum; then menu; else show_help; fi ;;
    *) error "Unknown command: $1"; show_help; exit 1 ;;
esac
