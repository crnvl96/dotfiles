#!/bin/bash

set -euo pipefail

RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

command_exists() { command -v "$1" >/dev/null 2>&1; }

info() {
    if command_exists gum; then
        gum log --level info "$*"
    else
        echo -e "${BLUE}[INFO]${NC} $*"
    fi
}

success() {
    if command_exists gum; then
        gum log --level info "$*"
    else
        echo -e "${GREEN}[SUCCESS]${NC} $*"
    fi
}

warning() {
    if command_exists gum; then
        gum log --level warn "$*"
    else
        echo -e "${YELLOW}[WARNING]${NC} $*"
    fi
}

error() {
    if command_exists gum; then
        gum log --level error "$*"
    else
        echo -e "${RED}[ERROR]${NC} $*"
    fi
}

slog() {
    local level="$1"; shift
    if command_exists gum; then
        gum log --structured --level "$level" "$@"
    else
        local msg="${1:-}"; if [ "$#" -gt 0 ]; then shift; fi
        local out="[$(echo "$level" | tr '[:lower:]' '[:upper:]')] $msg"
        while [ "$#" -gt 1 ]; do
            out+=" $1=$2"; shift 2
        done
        echo -e "$out"
    fi
}

join_by() { local IFS="$1"; shift; echo "$*"; }

spin_if_gum() {
    local title="$1"; shift
    if command_exists gum; then
        gum spin --spinner dot --title "$title" -- "$@"
    else
        "$@"
    fi
}

MISE_TOOLS=(
    biome
    node@24.9.0
    go
    rust
    uv
    stylua
    taplo
    prettier
    jq
    dprint
    lua-language-server
    python
    gofumpt
)

YAY_TOOLS=(
    zellij
    crush-bin
    calibre-bin
    opencode-bin
    bob
)

UV_TOOLS=(
    pyright
    ruff
)

NPM_TOOLS=(
    vscode-langservers-extracted
    typescript-language-server
    yaml-language-server
    codex
    @typescript/native-preview
    @github/copilot-language-server
    @fsouza/prettierd
)

CARGO_TOOLS=(
    bacon
    bacon-ls
)

GO_TOOLS=(
    golang.org/x/tools/gopls@latest
    github.com/mattn/efm-langserver@latest
)

install_mise_tool() {
    local t="$1"
    local spec="$t"
    case "$t" in
        *@*) : ;;
        *) spec="${t}@latest" ;;
    esac
    if command_exists mise; then
        slog info "Syncing" manager mise tool "$spec"
        spin_if_gum "mise: syncing $spec" mise use --cd ~ --force --pin "$spec"
    else
        error "mise is not installed. Please install mise first."
        return 1
    fi
}

install_yay_tools() {
    if ! command_exists yay; then
        error "yay is not installed. Please install yay first."
        return 1
    fi
    [ "$#" -gt 0 ] || return 0
    sudo -v
    slog info "Syncing" manager aur tools "$(join_by ', ' "$@")"
    spin_if_gum "aur: syncing ${*}" yay --sudoloop -Sy --needed --noconfirm "$@"
}

install_uv_tool() {
    local t="$1"
    if command_exists uv; then
        slog info "Syncing" manager uv tool "$t"
        spin_if_gum "uv: syncing $t" uv tool install --upgrade "$t"
    else
        error "uv is not installed. Please install uv first."
        return 1
    fi
}

install_npm_tool() {
    local t="$1"
    if command_exists npm; then
        slog info "Syncing" manager npm tool "$t"
        spin_if_gum "npm: syncing $t" npm i -g "${t}@latest"
    else
        error "npm is not installed. Please install npm first."
        return 1
    fi
}

install_cargo_tool() {
    local t="$1"
    if command_exists cargo; then
        slog info "Syncing" manager cargo tool "$t"
        spin_if_gum "cargo: syncing $t" cargo install --force --locked "$t"
    else
        error "cargo is not installed. Please install cargo first."
        return 1
    fi
}

install_go_tool() {
    local t="$1"
    if command_exists go; then
        slog info "Syncing" manager go tool "$t"
        spin_if_gum "go: syncing $t" go install "$t"
    else
        error "go is not installed. Please install go first."
        return 1
    fi
}

sync_mise_tools() {
    local list; list=$(join_by ', ' "${MISE_TOOLS[@]}")
    slog info "Syncing tools" manager mise action sync tools "$list"
    local t
    for t in "${MISE_TOOLS[@]}"; do
        install_mise_tool "$t"
    done
    success "mise sync complete: $list"
}

sync_yay_tools() {
    local list; list=$(join_by ', ' "${YAY_TOOLS[@]}")
    slog info "Syncing tools" manager aur action sync tools "$list"
    install_yay_tools "${YAY_TOOLS[@]}"
    success "aur sync complete: $list"
}

sync_uv_tools() {
    local list; list=$(join_by ', ' "${UV_TOOLS[@]}")
    slog info "Syncing tools" manager uv action sync tools "$list"
    local t
    for t in "${UV_TOOLS[@]}"; do
        install_uv_tool "$t"
    done
    success "uv sync complete: $list"
}

sync_npm_tools() {
    local list; list=$(join_by ', ' "${NPM_TOOLS[@]}")
    slog info "Syncing tools" manager npm action sync tools "$list"
    local t
    for t in "${NPM_TOOLS[@]}"; do
        install_npm_tool "$t"
    done
    success "npm sync complete: $list"
}

sync_cargo_tools() {
    local list; list=$(join_by ', ' "${CARGO_TOOLS[@]}")
    slog info "Syncing tools" manager cargo action sync tools "$list"
    local t
    for t in "${CARGO_TOOLS[@]}"; do
        install_cargo_tool "$t"
    done
    success "cargo sync complete: $list"
}

sync_go_tools() {
    local list; list=$(join_by ', ' "${GO_TOOLS[@]}")
    slog info "Syncing tools" manager go action sync tools "$list"
    local t
    for t in "${GO_TOOLS[@]}"; do
        install_go_tool "$t"
    done
    success "go sync complete: $list"
}

sync_all() {
    info "Starting sync of all tools..."
    sync_mise_tools
    sync_yay_tools
    sync_uv_tools
    sync_cargo_tools
    sync_npm_tools
    sync_go_tools
    success "All tools sync completed"
}

menu() {
    if ! command_exists gum; then
        error "gum is not installed"
        return 1
    fi
    local actions selection
    actions=$(printf "%s\n" \
        sync-all \
        sync-yay \
        sync-uv \
        sync-cargo \
        sync-mise \
        sync-npm \
        sync-go \
        quit)
    selection=$(echo "$actions" | gum choose --height 15 --header "Tools Manager") || true
    case "${selection:-}" in
        sync-all) sync_all ;;
        sync-yay) sync_yay_tools ;;
        sync-uv) sync_uv_tools ;;
        sync-cargo) sync_cargo_tools ;;
        sync-mise) sync_mise_tools ;;
        sync-npm) sync_npm_tools ;;
        sync-go) sync_go_tools ;;
        ""|quit) : ;;
        *) error "Unknown selection: $selection" ;;
    esac
}

show_help() {
    cat << EOF
Tools Management Script

Usage: tools [command]

Commands:
  sync-all      Sync all tools
  sync-yay      Sync yay (AUR) managed tools
  sync-uv       Sync uv managed tools
  sync-cargo    Sync cargo managed tools
  sync-mise     Sync mise managed tools
  sync-npm      Sync npm managed tools
  sync-go       Sync go managed tools
  menu          Interactive menu (gum)
  help          Show this help message

EOF
}

case "${1:-}" in
    sync-all) sync_all ;;
    sync-yay) sync_yay_tools ;;
    sync-uv) sync_uv_tools ;;
    sync-cargo) sync_cargo_tools ;;
    sync-mise) sync_mise_tools ;;
    sync-npm) sync_npm_tools ;;
    sync-go) sync_go_tools ;;
    menu) menu ;;
    help|-h|--help) show_help ;;
    "") if command_exists gum; then menu; else show_help; fi ;;
    *) error "Unknown command: $1"; show_help; exit 1 ;;
esac
